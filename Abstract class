#1.Create an abstract class with abstract and non-abstract methods. 
from abc import ABC, abstractmethod
class AbstractClass(ABC):  # Abstract class
    def __init__(self, name):
        self.name = name

    @abstractmethod
    def abstract_method(self):
        pass  # Abstract method, must be implemented in the child class

    def non_abstract_method(self):
        print(f"Non-abstract method called. Name: {self.name}")

#2. Create a sub class for an abstract class. Create an object in the child class for the abstract class and access the non-abstract methods 
class Childclass(AbstractClass):
    def abstract_method(self):
        print("Abstract method in child class")
child=Childclass("Sowmya")
child.non_abstract_method()


#3. Create an instance for the child class in child class and call abstract methods 
child.abstract_method()


#4. Create an instance for the child class in child class and call non-abstract methods
child.non_abstract_method()
